<% content_for :page_title do -%>This is a very long post title that seems to keep going and going... : example.com<% end -%>
<% content_for :content_header do -%>
<div class="page-header">
  <div class="pull-right add-left">
    <a class="btn large default votesourceup">+</a> 
    <a class="btn large default votesourcedown">&#8722;</a>
    <a class="btn large primary">Edit &rarr;</a>
  </div>
  <div class="pull-left add-right">
    <%= image_tag("http://placehold.it/36x36", :class=>"inline") -%>
  </div>
  <h1 class="post-title" id="post-title">
	Loading...
  </h1>
</div>
<% end -%>

<div class="span7 pull-left"> 
  <p id="post-text">Loading...</p>
  <h3>Link</h3>
  <ul>
    <li id="post-link">Loading...</li>
  </ul>
  <h3>Files</h3>
  <ul>
    <li><a href="">Architecture Overview.pptx</a></li>
    <li><a href="">Conference Presentation.pptx</a></li>
  </ul>   
</div>

<div class="span8 pull-right">
  <div class="pull-right">
    <a href="#" data-controls-modal="modal-add-response" data-backdrop="static" class="btn small primary">Add Response</a>
  </div>
  
  <h2 class="add-bottom">Responses <small>5 responses</small></h2> 
  <div id="comments-section">
	Loading..
  </div>
  
</div>

<div id="modal-add-response" class="modal hide fade" style="display: none; ">
  <div class="modal-header">
    <a href="#" class="close">Ã—</a>
    <h3>Add Response</h3>
  </div>
  <div class="modal-body">
    <%= form_tag app_post_comments_path(@app.id, @post_id, :format => :json), :method => :post, :id =>"newcomment" do %>
      <fieldset>
	    <div id="errors-container" class="clearfix" style="visibility: hidden;">
          	<div id="errors" class="input">
	         </div>          
        </div>
        <div class="clearfix">
          <label for="textarea">Text</label>
          <div class="input">
            <textarea class="span6" id="textarea2" name="comment[text]" rows="12"></textarea>
          </div>
        </div><!-- /clearfix -->        
      </fieldset>
    <% end %>
  </div>
  <div class="modal-footer">
    <a id="newcomment-save" href="#" class="btn primary">Save</a>
    <a href="#" class="btn secondary">Preview</a>
  </div>
</div>
<% content_for :include_js do %>
<script id="_post_title" type="text/x-handlebars-template">
{{title}}<br/>
<small>+{{up}} -{{down}} &bull; {{updated_at}} by <a href="/users/{{user_id}}">{{user_id}}{{user_name}}</a> &bull; <a href="{{url}}">{{domain}}</a></small> 
<span class="label">topic</span> <span class="label">file</span> <span class="label">link</span>
</script>
<script id="node" type="text/x-handlebars-template">
<div style="margin-left: {{width}}px;" class="add-bottom">
    <div class="pull-right half-left">
      <a class="btn small default voteup" data-comment-id="{{id}}">+</a> 
      <a class="btn small default votedown" data-comment-id="{{id}}">&#8722;</a>
    </div>  
    <div class="pull-left"><img src="http://placehold.it/36x36" alt=""></div>
    <div class="post-response">
      <span class="info">
      {{created_at}}
      <span class="nowrap">by <a href="/users/1">{{created_by}}</a></span> 
      &bull; {{score}} pt
      &bull; <a href="/apps/<%= params[:app_id]%>/posts/<%= @post_id %>/comments/{{id}}">Permalink</a>
      </span>
      <p>{{text}}</p>
    </div>
  </div>
</script>

<script type="text/javascript">
$(document).ready(function() {
	
	var source = $("#_post_title").html();
	var template = Handlebars.compile(source);
	var commentNode = $('#node').html();
	var commentTmpl = Handlebars.compile(commentNode);
	
	var s = new Signalike.Source(<%=@post_id%>);
	s.fetch({
		success: function(data) {
			//console.log(data);
			$('#post-title').html(template(data.source));
			$('#post-text').html(data.source.text);
			$('#post-link').html('<a href="'+data.source.url+'">'+data.source.url+'</url>');
			
			//display the comments!
			var fun = function (data, root, level) {
				var compiled = [];
				$.each(data, function (i, comment) {
					//identify how much margin-left we want for this
					comment.width = level * 46;
					//compile
					compiled.push(commentTmpl(comment));
					//console.log(comment);
					//check if this has children and render its children if it has
					if (root[String(comment.id)]) {
						compiled = compiled.concat(fun(root[String(comment.id)], root, level + 1));
					}
				});
				return compiled;
			}
			var all = fun(data.comments['-1'] || [], data.comments, 0);
			if (all.length > 0) {
				$('#comments-section').html(all.join());
			}
			else {
				$('#comments-section').html("No comments yet!");
			}
			
		}
		
	});
	
	//new comment
	var f = $('#newcomment');
	
	f.submit(function () {
		var url = f.attr('action');
		var data = f.serialize();
		console.log(url);
		console.log(data);
		$.ajax({
		    type: 'POST',
			url: url,
			data: data,
			success: function (object) {{
				console.log(object)
				if (object.success) {
					window.location.reload();
				}
				else {
					$('#errors').html(object.errors.join("<br />"));
					$('#errors-container').attr("style", "visibility: visible");
				}
			}},
			dataType: 'json'
		});
		return false;
	});
	
	$('#newcomment-save').click(function () {
		f.submit();
	});


	//vote handler
	var voteComment = function (type) { //type can be up or down, 
		var id = $(this).attr('data-comment-id');
			
		$.ajax({
		    type: 'POST',
			url: '/apps/<%= params[:app_id]%>/posts/<%= @post_id %>/comments/' + id + '/vote' + type,
			data: {
				_method: "put"
			},
			success: function (object) {{
				console.log(object)
				if (object.success) {
					window.location.reload();
				}
				else {
					//$('#errors').html(object.errors.join("<br />"));
					//$('#errors-container').attr("style", "visibility: visible");
				}
			}},
			dataType: 'json'
		});
	};

	$('.voteup').live({
		click: function () {
			voteComment.call(this, 'up');
		}
	});

	$('.votedown').live({
		click: function () {
			voteComment.call(this, 'down');
		}
	});

	//vote source
	var voteSource = function (type) { //type can be up or down, 
		$.ajax({
		    type: 'POST',
			url: '/apps/<%= params[:app_id]%>/posts/<%= @post_id %>/vote' + type,
			data: {
				_method: "put"
			},
			success: function (object) {{
				console.log(object)
				if (object.success) {
					window.location.reload();
				}
				else {
					//$('#errors').html(object.errors.join("<br />"));
					//$('#errors-container').attr("style", "visibility: visible");
				}
			}},
			dataType: 'json'
		});
	};
	$('.votesourceup').live({
		click: function () {
			voteSource('up');
		}
	});
	$('.votesourcedown').live({
		click: function () {
			voteSource('down');
		}
	});
});
</script>
<% end %>