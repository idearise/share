<% content_for :page_title do -%>This is a very long post title that seems to keep going and going... : example.com<% end -%>
<% content_for :content_header do -%>
<div class="page-header">
  <div class="pull-right add-left">
    <a class="btn btn-large votesourceup">+</a> 
    <a class="btn btn-large votesourcedown">&#8722;</a>
    <a data-controls-modal="modal-edit-post" data-backdrop="static" class="btn btn-large btn-primary">Edit &rarr;</a>
  </div>
  <div id="post-header">
    Loading...
  </div>
</div>
<% end -%>

<div class="row">
  <div class="span6"> 
    <p id="post-text">Loading...</p>
    <h3>Link</h3>
    <ul>
      <li id="post-link">Loading...</li>
    </ul>
    <h3>File</h3>
    <ul>
      <li><a href="">Architecture Overview.pptx</a></li>
    </ul>   
  </div>

  <div class="span6">
    <div class="pull-right">
    <% if user_signed_in? -%>
      <a href="#" data-controls-modal="modal-add-response" data-backdrop="static" class="btn btn-small btn-primary response">Add Response</a>
    <% else -%>
      <a href="/signin" class="btn btn-small btn-success">Login to Respond</a>
    <% end -%>
    </div>

    <h2 class="add-bottom">Responses <small>5 responses</small></h2> 
    <div id="comments-section">
  	Loading..
    </div>
  </div>
</div>

<div id="modal-add-response" class="modal hide fade" style="display: none; ">
  <div class="modal-header">
    <a href="#" class="close">×</a>
    <h3>Add Response</h3>
  </div>
  <div class="modal-body">
    <%= form_tag app_post_comments_path(@app.id, @post_id, :format => :json), :method => :post, :id =>"newcomment" do %>
      <fieldset>
  	    <div id="errors-container" class="clearfix" style="visibility: hidden;">
          <div id="errors" class="input">
          </div>          
        </div>
        <div class="control-group">
          <label for="textarea">Text</label>
          <input type="hidden" name="comment[parent_id]" id="comment_parent_id" />
          <div class="controls">
            <textarea class="span5" id="comment_text" name="comment[text]" rows="12"></textarea>
          </div>
        </div>
      </fieldset>
    <% end %>
  </div>
  <div class="modal-footer">
    <a id="newcomment-save" href="#" class="btn primary">Save</a>
  </div>
</div>

<div id="modal-edit-response" class="modal hide fade" style="display: none; ">
  <div class="modal-header">
    <a href="#" class="close">×</a>
    <h3>Edit Response</h3>
  </div>
  <div class="modal-body">
    <%= form_tag app_post_path(@app.id, @post_id), :method => :put, :id =>"editcomment" do %>
      <fieldset>
  	    <div id="errors-container" class="clearfix" style="visibility: hidden;">
          <div id="errors" class="input">
          </div>          
        </div>
        <div class="control-group">
          <label for="textarea">Text</label>
          <input type="hidden" name="comment[parent_id]" id="edit_comment_parent_id" />
          <div class="controls">
            <textarea class="span5" id="edit_comment_text" name="comment[text]" rows="12"></textarea>
          </div>
        </div>
      </fieldset>
    <% end %>
  </div>
  <div class="modal-footer">
    <a id="editcomment-save" href="#" class="btn primary">Save</a>
  </div>
</div>

<% content_for :include_js do %>
<%= render partial: 'shared/handlebars/post_header', :locals => { :ident => '_posts' }%>
<%= render partial: 'shared/handlebars/node', :locals => { :ident => 'node' }%>


<div id="modal-edit-post" class="modal hide fade" style="display: none; ">
  <div class="modal-header">
    <a href="#" data-dismiss="modal" class="close">×</a>
    <h3>Edit Post</h3>
  </div>
  <div class="modal-body">
	<%= form_tag app_post_path(@app.id, @post_id, :format => :json), :method => :put, :id =>"editsource" do %>
      <fieldset>
      	<div id="errors-container" class="clearfix" style="visibility: hidden;">
        	<div id="errors" class="input">
          </div>     
        </div>
        <div class="control-group">
          <label for="" class="control-label">Title *</label>
          <div class="controls">
      			<%= text_field_tag "source[title]", nil, :id => "xlInput", :size => "30", :class => "span5", :placeholder => ""%>
          </div>
        </div>
        <div class="control-group">
          <label for="" class="control-label">Link</label>
          <div class="controls">
      			<%= text_field_tag "source[url]", nil, :id => "prependedInput", :size => "16", :class => "span5",:placeholder =>""%>
          </div>
        </div>        
        <div class="control-group">
          <label for="" class="control-label">File</label>
          <div class="controls">
            <input class="input-file" id="fileInput" name="fileInput" type="file">
          </div>
        </div>        
        <div class="control-group">
          <label for="textarea" class="control-label">Text</label>
          <div class="controls">
      			<%= text_area_tag "source[text]", nil, :id => "textarea2", :rows => "5", :class => "span5"%>
          </div>
        </div>        
      </fieldset>
    <% end -%>
  </div>
  <div class="modal-footer">
    <a href="#" id="editsource-save" class="btn btn-primary">Save</a>
  </div>
</div>

<script type="text/javascript">
$(document).ready(function() {
	
	var source = $("#_post_header").html();
	var template = Handlebars.compile(source);
	var commentNode = $('#node').html();
	var commentTmpl = Handlebars.compile(commentNode);
	
	var s = new Signalike.Source(<%=@post_id%>);
	s.fetch({
		success: function(data) {
			//display the comments!
			var user_ids = [data.source.user_id];
			var collectUserIds = function (data, root, level) {
				
				$.each(data, function (i, comment) {
					//identify how much margin-left we want for this
					//console.log(comment);
					user_ids.push(comment.user_id);
					if (root[String(comment.id)]) {
						collectUserIds(root[String(comment.id)], root, level + 1);
					}
				});
				
			};
			collectUserIds(data.comments['-1'] || [], data.comments, 0);
			Users.getLabels(user_ids, function (user_data) {
				var fun = function (data, root, level) {
					var compiled = [];
					$.each(data, function (i, comment) {
						//identify how much margin-left we want for this
						comment.width = level * 46;
						comment.username = user_data[String(comment.user_id)]["username"];
            comment.picture_small = user_data[String(comment.user_id)]["picture_small"];
						//compile
						compiled.push(commentTmpl(comment));
						//console.log(comment);
						//check if this has children and render its children if it has
						if (root[String(comment.id)]) {
							compiled = compiled.concat(fun(root[String(comment.id)], root, level + 1));
						}
					});
					return compiled;
				};
				var all = fun(data.comments['-1'] || [], data.comments, 0);
				data.source.username = user_data[String(data.source.user_id)]["username"];
				data.source.picture = user_data[String(data.source.user_id)]["picture"];
				
				$('#post-header').html(template(data.source));
				$('#post-text').html(data.source.text);
				$('#post-link').html('<a href="'+data.source.url+'">'+data.source.url+'</url>');
				
				//the edit form
				$('#xlInput').val(data.source.title);
				$('#prependedInput').val(data.source.url);
				$('#textarea2').val(data.source.text);
				
				
				if (all.length > 0) {
					$('#comments-section').html(all.join());
				}
				else {
					$('#comments-section').html("No comments yet!");
				}
			});
		}
		
	});
	
	//new comment
	var f = $('#newcomment');
	
	f.submit(function () {
		var url = f.attr('action');
		var data = f.serialize();
		//console.log(url);
		//console.log(data);
		$.ajax({
		    type: 'POST',
			url: url,
			data: data,
			success: function (object) {{
				console.log(object)
				if (object.success) {
					window.location.reload();
				}
				else {
					$('#errors').html(object.errors.join("<br />"));
					$('#errors-container').attr("style", "visibility: visible");
				}
			}},
			dataType: 'json'
		});
		return false;
	});
	
	$('#newcomment-save').click(function () {
		f.submit();
	});


	//vote handler
	var voteComment = function (type) { //type can be up or down, 
		var id = $(this).attr('data-comment-id');
			
		$.ajax({
		    type: 'POST',
			url: '/apps/<%= params[:app_id]%>/posts/<%= @post_id %>/comments/' + id + '/vote' + type,
			data: {
				_method: "put"
			},
			success: function (object) {{
				console.log(object)
				if (object.success) {
					window.location.reload();
				}
				else {
					//$('#errors').html(object.errors.join("<br />"));
					//$('#errors-container').attr("style", "visibility: visible");
				}
			}},
			dataType: 'json'
		});
	};

	$('.voteup').live({
		click: function () {
			voteComment.call(this, 'up');
		}
	});

	$('.votedown').live({
		click: function () {
			voteComment.call(this, 'down');
		}
	});

	//vote source
	var voteSource = function (type) { //type can be up or down, 
		$.ajax({
		    type: 'POST',
			url: '/apps/<%= params[:app_id]%>/posts/<%= @post_id %>/vote' + type,
			data: {
				_method: "put"
			},
			success: function (object) {{
				console.log(object)
				if (object.success) {
					window.location.reload();
				}
				else {
					//$('#errors').html(object.errors.join("<br />"));
					//$('#errors-container').attr("style", "visibility: visible");
				}
			}},
			dataType: 'json'
		});
	};
	$('.votesourceup').live({
		click: function () {
			voteSource('up');
		}
	});
	$('.votesourcedown').live({
		click: function () {
			voteSource('down');
		}
	});

	//comment reply handler
	$('.response').live({
		click: function () {
			var commentId = $(this).attr('data-comment-id');
			$('#comment_parent_id').attr('value', commentId);
			
			$('#comment_text').val('');
			//refresh modal data
			//then show modal
			//var $this = $(this).data('show', true)
			//$('#modal-comment-response').modal($this.data());	
		}
	});
	
	var editPost = $('#editsource');
	
	editPost.submit(function () {
		var url = editPost.attr('action');
		var data = editPost.serialize();
		console.log(url);
		console.log(data);
		$.ajax({
		    type: 'POST',
			url: url,
			data: data,
			success: function (object) {{
				console.log(object)
				if (object.success) {
					window.location.reload();
				}
				else {
					$('#errors').html(object.errors.join("<br />"));
					$('#errors-container').attr("style", "visibility: visible");
				}
			}},
			dataType: 'json'
		})
		return false;
	});
	
	
	
	$('#editsource-save').click(function () {
		editPost.submit();
	});
	
	
	$('.editcomment').live({
		click: function () {
			var commentId = $(this).attr('data-comment-id');
			var parentId = $(this).attr('data-parent-id');
			$('#edit_comment_parent_id').attr('value', parentId);
			//console.log(commentId);
			//console.log(parentId);
			//console.log($(commentId+'_comment_text').text())
			$('#editcomment').attr('action', $('#editcomment').attr('action') + '/comments/' +commentId + '.json');
			$('#edit_comment_text').val($('#'+commentId+'_comment_text').text());
			//refresh modal data
			//then show modal
			//var $this = $(this).data('show', true)
			//$('#modal-comment-response').modal($this.data());	
		}
	});
	
	var editPost = $('#editcomment');
	
	editPost.submit(function () {
		var url = editPost.attr('action');
		var data = editPost.serialize();
		console.log(url);
		console.log(data);
		$.ajax({
		    type: 'POST',
			url: url,
			data: data,
			success: function (object) {{
				console.log(object)
				if (object.success) {
					window.location.reload();
				}
				else {
					$('#errors').html(object.errors.join("<br />"));
					$('#errors-container').attr("style", "visibility: visible");
				}
			}},
			dataType: 'json'
		})
		return false;
	});
	
	
	
	$('#editcomment-save').click(function () {
		editPost.submit();
	});
	
});
</script>
<% end %>